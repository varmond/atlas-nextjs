// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  SUSPENDED
}

enum OrganizationPlan {
  FREE
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum InvoiceStatus {
  DRAFT
  POSTED
}

model User {
  id         String  @id @default(cuid())
  externalId String? @unique

  quotaLimit Int
  plan       Plan @default(FREE)

  email          String           @unique
  apiKey         String           @unique @default(cuid())
  discordId      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  role           OrganizationRole @default(MEMBER)

  EventCategoies  EventCategory[]
  events          Event[]
  Quota           Quota[]
  // Products       Products[]
  Products        Products[]
  Inventory       Inventory[]
  InventoryHeader InventoryHeader[]
  Location        Location[]
  Invoice         Invoice[]
  purchaseOrders  PurchaseOrder[]

  @@index([email, apiKey])
  @@index([organizationId])
}

model EventCategory {
  id    String  @id @default(cuid())
  name  String
  color Int
  emoji String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events Event[]

  @@unique([name, userId])
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}

model Event {
  id               String @id @default(cuid())
  formattedMessage String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  name   String
  fields Json

  deliveryStatus DeliveryStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EventCategory   EventCategory? @relation(fields: [eventCategoryId], references: [id])
  eventCategoryId String?

  @@index([createdAt])
}

model Quota {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  year  Int
  month Int
  count Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, year, month])
}

model Products {
  id                        String      @id @default(cuid())
  itemCode                  String
  name                      String
  price                     Decimal
  packageCost               Decimal
  manufacturerBarcodeNumber String
  sku                       String
  type                      ProductType

  packageUOM           UOM     @default(BOX)
  containerUOM         UOM     @default(VIAL)
  quantityPerContainer Int     @default(1)
  unitUOM              UOM     @default(ML)
  unitQuantity         Decimal @default(1.0)

  altUOM Json?

  userId         String
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  User        User          @relation(fields: [userId], references: [id])
  Invnetory   Inventory[]
  InvoiceItem InvoiceItem[]
  purchaseOrderItems PurchaseOrderItem[]
}

enum UOM {
  BOX // Box(es)
  VIAL // Vial(s)
  CARTON // Carton(s)
  UNIT // Unit(s)
  ML // Milliliter(s)
  MG // Milligram(s)
  G // Gram(s)
  KG // Kilogram(s)
  L // Liter(s)
  TABLET // Tablet(s)
  CAPSULE // Capsule(s)
  BOTTLE // Bottle(s)
  PACK // Pack(s)
  CASE // Case(s)
  EA // Each
  DOSE // Dose(s)
  AMPULE // Ampule(s)
  PREFILLED // Prefilled Syringe(s)
  KIT // Kit(s)
}

enum ProductType {
  MEDICATION
  IMMUNIZATION
  GENERAL
  CUSTOM
}

model Inventory {
  id             String   @id @default(cuid())
  product        Products @relation(fields: [productId], references: [id])
  productId      String
  price          Decimal
  packageCost    Decimal
  lotNumber      String
  expirationDate DateTime
  serialNumber   String
  vendor         String
  manufacturer   String
  unitsReceived  Int

  InventoryHeader InventoryHeader @relation(fields: [headerId], references: [id], onDelete: Cascade)
  headerId        String

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  User        User          @relation(fields: [userId], references: [id])
  userId      String
  Location    Location?     @relation(fields: [locationId], references: [id])
  locationId  String?
  InvoiceItem InvoiceItem[]
}

model InventoryHeader {
  id            String   @id @default(cuid())
  receiptNumber String?
  receiptDate   DateTime @default(now())
  vendor        String
  manufacturer  String?
  notes         String?
  packageCost   Decimal  @default(0)

  // Receipt details
  items Inventory[]

  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])

  // Relations
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  userId         String
  User           User         @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id          String  @id @default(cuid())
  name        String
  description String?
  isActive    Boolean @default(true)

  // Relations
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  userId         String
  User           User         @relation(fields: [userId], references: [id])

  // Items stored at this location
  inventoryItems Inventory[]

  // Headers can also reference a default location
  inventoryHeaders InventoryHeader[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Invoice   Invoice[]
  purchaseOrders PurchaseOrder[]

  @@unique([name, organizationId])
}

model Organization {
  id   String @id @default(cuid())
  name String

  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  planType           OrganizationPlan   @default(FREE)

  settings Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  Products Products[]

  Inventory       Inventory[]
  InventoryHeader InventoryHeader[]
  Location        Location[]
  Invoice         Invoice[]
  Patient         Patient[]
  purchaseOrders  PurchaseOrder[]
  vendors         Vendor[]

  @@index([id])
}

model Patient {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String?

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Invoice   Invoice[]

  @@index([organizationId])
}

model Invoice {
  id             String        @id @default(cuid())
  invoiceNumber  Int          @default(1000)  // Default for new records
  patientId      String
  locationId     String
  organizationId String
  userId         String
  status         InvoiceStatus @default(DRAFT)
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  items        InvoiceItem[]
  patient      Patient       @relation(fields: [patientId], references: [id])
  location     Location      @relation(fields: [locationId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  organization Organization  @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([patientId])
  @@index([locationId])
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  productId   String
  inventoryId String
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  invoice   Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product   Products  @relation(fields: [productId], references: [id])
  inventory Inventory @relation(fields: [inventoryId], references: [id])

  @@index([invoiceId])
  @@index([productId])
  @@index([inventoryId])
}

model PurchaseOrder {
  id             String        @id @default(cuid())
  orderNumber    Int          @default(1000)
  vendorId       String
  locationId     String
  organizationId String
  userId         String
  status         PurchaseOrderStatus @default(DRAFT)
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  items        PurchaseOrderItem[]
  vendor       Vendor        @relation(fields: [vendorId], references: [id])
  location     Location      @relation(fields: [locationId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  organization Organization  @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([vendorId])
  @@index([locationId])
}

model PurchaseOrderItem {
  id              String   @id @default(cuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  price           Decimal  @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product      Products     @relation(fields: [productId], references: [id])

  @@index([purchaseOrderId])
  @@index([productId])
}

enum PurchaseOrderStatus {
  DRAFT
  POSTED
  RECEIVED
  CANCELLED
}

model Vendor {
  id            String   @id @default(cuid())
  name          String
  email         String?
  phone         String?
  address       String?
  organizationId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  organization   Organization    @relation(fields: [organizationId], references: [id])
  purchaseOrders PurchaseOrder[]

  @@index([organizationId])
}
